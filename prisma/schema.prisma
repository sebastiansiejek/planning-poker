// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.md"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String?    @unique
  password      String?
  emailVerified DateTime?  @map("email_verified")
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  roomsAuthored Room[]     @relation("RoomAuthor") // One-to-many for rooms authored
  roomsJoined   Room[]     @relation("RoomParticipants") // Many-to-many for rooms joined
  UserVote      UserVote[]
  RoomUser      RoomUser[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_requests")
}

model Room {
  id        String     @id @default(cuid())
  name      String
  authorId  String
  author    User       @relation("RoomAuthor", fields: [authorId], references: [id])
  users     User[]     @relation("RoomParticipants")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Game      Game[]
  RoomUser  RoomUser[]

  @@unique([authorId, name])
  @@map("rooms")
}

model RoomUser {
  id        String   @id @default(cuid())
  roomId    String
  userId    String
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roomId, userId])
  @@map("room_users")
}

enum GameStatus {
  STARTED
  FINISHED
}

model Game {
  id          String     @id @default(cuid())
  name        String?
  description String?
  roomId      String
  room        Room       @relation(fields: [roomId], references: [id])
  UserVote    UserVote[]
  status      GameStatus @default(STARTED)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("games")
}

model UserVote {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  vote      String
  user      User     @relation(fields: [userId], references: [id])
  game      Game     @relation(fields: [gameId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, gameId])
  @@map("user_votes")
}
